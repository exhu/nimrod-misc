My UI ideas:


FontAbstraction:
    - font provider (enumerate, search etc.
        - simple like in FLTK
            - render using X
        - fontconfig based
            - render using freetype
            
        - GDI
            - render using windows gdi
            
CanvasAbstraction:
    - draw using primitives
        - like in FLTK: Xlib, GDI
    - cairo
    - opengl ?
    
ThemeAbstraction:
    - basic theme
        - most efficient implementation without anti-aliasing etc.
    - cairo theme ?
    - opengl theme ?

Each widget calls theme to request draw implementation for it, if not found then
    draws itself.


dialog description files, no code inside. Code is denoted by action names.

e.g. using LUA syntax, although not sure if lua scripting is necessary:

Window {
    name = "main window",
    
    layout = FreeLayout {
        Button {
            text = "Close",
            action = "close window", -- requests function pointer associated 
                            -- with "close window" from current actions provider
            image = "close_btn"  -- requests resource named "close_btn" from 
                                -- current resource provider
        },
    }   
    
}


Nimrod source:

var ui: RUIBuilder

var resources = ResourceProvider("my_bin")

var actions = uiActions({"close window" : proc(sender: TObject) = ui.findWindow("main window").close})

ui = uiBuilder("myui_desc.lua", actions, resources)

----------

Resource provider loads bins and registers resources, also dispatches caches:

- strings resource type
- sprite

---
Resource bin description (LUA syntax):

Bin {
    name = "default",
    strings = "english_strings.lua",
    sprites = {pilot = "Main/pilot", explosion = "Main/explode"},
    fonts = {default = "Fonts/alia.ttf", game_over = "Fonts/bold.ttf"},
}

-----
UI Context object holds:
    - current resource provider
    - current actions provider
    - current root control/window
    
-----------------------------------


idea A)
VisualItem = lightweight ui element that does not respond to keyboard/mouse, 
                e.g. player sprite 
    | 
    VisualInputItem = + keyboard/mouse input
    
    
idea B) Split UI into visual scenegraph and input scenegraph.

VisualNode:
    - name
    - do_draw
    - do_update
    - color
    - angle
    - scale
    - effect (shader?)
    - position
    - pivot
    - size
    - slaves
    - master
    - visible
    |
    SpriteNode:    
        - image
        - frame
        
AnchorNode - invisible node to quickly add/remove/group
    - position
        
Input: global hotkeys, window shortcuts (e.g. move/resize), default buttons, 
    control focus
        
    input graph is the pass of event handling, from top (app window) to 
    bottom (controls), node can consume event and further handling is stopped.
    
InputNode:
    - do_input
    - slaves (children)
    - master (parent)
    |
    InputNodeUI
        - rect
        - focused
        
        
=======================================

Backend interface:

WMWindow --- window manager window, e.g. application main window, Xlib window,
    Win32 HWND... -- used mainly for application window, tooltips, dialogs

IAppWindow -- must be always MWWindow descendant

ITopWindow -- can be either MWWindow (e.g. Win32 backend) or emulated themed window
    inside AppWindow (e.g. OpenGL backend)
    
IView -- base for control, window contents etc.

IToolTip, IPopupMenu

Allow double-buffering

TGuiUnit = int, float, double for different backends

IGuiDrawApi -- interface to draw using native backend drawing routines, i.e.
    uses TGuiUnit for all coordinates
    
    
Separate into Backend API and User/Public API. There should be declarative
drawing api (graph/layer based) and imperative for low-level.

===============================


graphics framework:

Layers [...]
    - objects [...]
        - type
        - instances[...]
        
Object types:
    - fill rect
    - image
    - text
    - line
    - rect
    - round rect
    - circle
    - ...
    
So having flat hierarchy we can render primitives in bulk, good for opengl.
Transforms?

DrawingContext:
    - drawLayers (retained mode)
    - getCairo (immediate)
    - getOpenGL (?)
